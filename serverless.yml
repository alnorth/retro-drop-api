service: retro-drop-api

provider:
  name: aws
  region: eu-west-2
  runtime: nodejs8.10
  stage: ${self:custom.stage}
  profile: retro-drop
  memorySize: 256 # We're not doing anything complicated here.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["ConnectionTokensDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["DevicesDynamoDBTable", "Arn" ] }
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
        - { "Fn::Join": [ "/", [ 
            { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }, "index", "dropboxAccountIdIndex" 
          ]]}
  environment:
    NODE_ENV: ${self:custom.stage}
    DOMAIN_NAME: ${self:custom.customDomain.domainName}
    CONNECTION_TOKENS_TABLE_NAME: ${self:custom.tableNames.connectionTokens}
    DEVICES_TABLE_NAME: ${self:custom.tableNames.devices}
    USERS_TABLE_NAME: ${self:custom.tableNames.users}
    # See https://serverless.com/blog/serverless-secrets-api-keys/ for details on ssm
    DROPBOX_APP_KEY: ${ssm:/retro-drop/dropbox-app-key}
    DROPBOX_APP_SECRET: ${ssm:/retro-drop/dropbox-app-secret~true}

# Routing logic is handled by express.
functions:
  app:
    handler: index.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'

plugins:
  - serverless-domain-manager

custom:
  stage: ${opt:stage, 'development'}
  domains:
    production: api.retrodropapp.com
    development: dev-api.retrodropapp.com
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: ''
    stage: ${self:custom.stage}
    createRoute53Record: true
    certificateName: '*.retrodropapp.com'
  tableNames:
    connectionTokens: 'connection-tokens-table-${self:custom.stage}'
    devices: 'devices-table-${self:custom.stage}'
    users: 'users-table-${self:custom.stage}'

resources:
  Resources:
    ConnectionTokensDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: connectionToken
            AttributeType: S
        KeySchema:
          - AttributeName: connectionToken
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableNames.connectionTokens}
        TimeToLiveSpecification:
          AttributeName: expires
          Enabled: true
    DevicesDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: deviceId
            AttributeType: S
        KeySchema:
          - AttributeName: deviceId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableNames.devices}
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: dropboxAccountId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableNames.users}
        GlobalSecondaryIndexes:
          - IndexName: dropboxAccountIdIndex
            KeySchema:
              - AttributeName: dropboxAccountId
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
